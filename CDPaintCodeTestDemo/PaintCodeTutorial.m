//
//  PaintCodeTutorial.m
//  PaintCodeTutorial
//
//  Created by cd on 16/11/14.
//  Copyright (c) 2016 chendi. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PaintCodeTutorial.h"


@implementation PaintCodeTutorial

#pragma mark Cache

static UIColor* _color = nil;

static UIImage* _imageOfCanvas1 = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color = [UIColor colorWithRed: 0.067 green: 0.553 blue: 0.855 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)color { return _color; }

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15, 30, 220, 220)];
    [PaintCodeTutorial.color setFill];
    [ovalPath fill];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(114, 2, 22, 34)];
    [PaintCodeTutorial.color setFill];
    [rectanglePath fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(204.14, 3.65)];
    [bezierPath addCurveToPoint: CGPointMake(214.5, 14) controlPoint1: CGPointMake(204.14, 3.64) controlPoint2: CGPointMake(209.28, 8.78)];
    [bezierPath addCurveToPoint: CGPointMake(225.36, 24.86) controlPoint1: CGPointMake(219.88, 19.39) controlPoint2: CGPointMake(225.36, 24.86)];
    [bezierPath addLineToPoint: CGPointMake(211.21, 39.01)];
    [bezierPath addCurveToPoint: CGPointMake(207.71, 35.51) controlPoint1: CGPointMake(211.21, 39.01) controlPoint2: CGPointMake(209.8, 37.6)];
    [bezierPath addLineToPoint: CGPointMake(193, 35.51)];
    [bezierPath addCurveToPoint: CGPointMake(193, 20.79) controlPoint1: CGPointMake(193, 35.51) controlPoint2: CGPointMake(193, 27.09)];
    [bezierPath addCurveToPoint: CGPointMake(190, 17.79) controlPoint1: CGPointMake(191.19, 18.98) controlPoint2: CGPointMake(190, 17.79)];
    [bezierPath addCurveToPoint: CGPointMake(193, 14.79) controlPoint1: CGPointMake(190, 17.79) controlPoint2: CGPointMake(191.25, 16.54)];
    [bezierPath addCurveToPoint: CGPointMake(193, 14) controlPoint1: CGPointMake(193, 14.29) controlPoint2: CGPointMake(193, 14)];
    [bezierPath addLineToPoint: CGPointMake(193.79, 14)];
    [bezierPath addCurveToPoint: CGPointMake(204.14, 3.65) controlPoint1: CGPointMake(197.98, 9.81) controlPoint2: CGPointMake(204.14, 3.65)];
    [bezierPath closePath];
    [PaintCodeTutorial.color setFill];
    [bezierPath fill];


    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 125, 140);

    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(4, -91)];
    [bezier2Path addCurveToPoint: CGPointMake(4, -14.46) controlPoint1: CGPointMake(4, -91) controlPoint2: CGPointMake(4, -47.89)];
    [bezier2Path addCurveToPoint: CGPointMake(15, 0) controlPoint1: CGPointMake(10.34, -12.71) controlPoint2: CGPointMake(15, -6.9)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 14.46) controlPoint1: CGPointMake(15, 6.9) controlPoint2: CGPointMake(10.34, 12.71)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 24) controlPoint1: CGPointMake(4, 20.39) controlPoint2: CGPointMake(4, 24)];
    [bezier2Path addLineToPoint: CGPointMake(-4, 24)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, 14.46) controlPoint1: CGPointMake(-4, 24) controlPoint2: CGPointMake(-4, 20.39)];
    [bezier2Path addCurveToPoint: CGPointMake(-15, 0) controlPoint1: CGPointMake(-10.34, 12.71) controlPoint2: CGPointMake(-15, 6.9)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -14.46) controlPoint1: CGPointMake(-15, -6.9) controlPoint2: CGPointMake(-10.34, -12.71)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -91) controlPoint1: CGPointMake(-4, -47.89) controlPoint2: CGPointMake(-4, -91)];
    [bezier2Path addLineToPoint: CGPointMake(4, -91)];
    [bezier2Path addLineToPoint: CGPointMake(4, -91)];
    [bezier2Path closePath];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawCanvas2
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 125, 110);

    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(4, -91)];
    [bezier2Path addCurveToPoint: CGPointMake(4, -14.46) controlPoint1: CGPointMake(4, -91) controlPoint2: CGPointMake(4, -47.89)];
    [bezier2Path addCurveToPoint: CGPointMake(15, 0) controlPoint1: CGPointMake(10.34, -12.71) controlPoint2: CGPointMake(15, -6.9)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 14.46) controlPoint1: CGPointMake(15, 6.9) controlPoint2: CGPointMake(10.34, 12.71)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 24) controlPoint1: CGPointMake(4, 20.39) controlPoint2: CGPointMake(4, 24)];
    [bezier2Path addLineToPoint: CGPointMake(-4, 24)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, 14.46) controlPoint1: CGPointMake(-4, 24) controlPoint2: CGPointMake(-4, 20.39)];
    [bezier2Path addCurveToPoint: CGPointMake(-15, 0) controlPoint1: CGPointMake(-10.34, 12.71) controlPoint2: CGPointMake(-15, 6.9)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -14.46) controlPoint1: CGPointMake(-15, -6.9) controlPoint2: CGPointMake(-10.34, -12.71)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -91) controlPoint1: CGPointMake(-4, -47.89) controlPoint2: CGPointMake(-4, -91)];
    [bezier2Path addLineToPoint: CGPointMake(4, -91)];
    [bezier2Path addLineToPoint: CGPointMake(4, -91)];
    [bezier2Path closePath];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];

    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfCanvas1
{
    if (_imageOfCanvas1)
        return _imageOfCanvas1;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(250, 280), NO, 0.0f);
    [PaintCodeTutorial drawCanvas1];

    _imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas1;
}

#pragma mark Customization Infrastructure

- (void)setCanvas1Targets: (NSArray*)canvas1Targets
{
    _canvas1Targets = canvas1Targets;

    for (id target in self.canvas1Targets)
        [target performSelector: @selector(setImage:) withObject: PaintCodeTutorial.imageOfCanvas1];
}


@end
